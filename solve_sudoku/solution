class Solution {
    boolean rows[][];
    boolean cols[][];
    boolean box[][];
    boolean solved;
    
    public void solveSudoku(char[][] board) {
        rows = new boolean[9][9];
        cols = new boolean[9][9];
        box = new boolean[9][9];
        solved = false;
        fill(board);
        solveSudoku(board,0);
    }
    
    public void fill(char[][] board)
    {
        for(int i=0; i<9; i++)
        {
            for(int j=0; j<9; j++)
            {
                if(board[i][j]!='.')
                {
                    int x = (i/3)*3+(j/3);
                    int nums = board[i][j]-'1';
                    rows[i][nums]=true;
                    cols[nums][j]=true;
                    box[x][nums]=true;
                }
            }
        }
    }
    
    public void solveSudoku(char[][] board, int n)
    {
        if(n==81)
        {
            solved=true;
            return;
        }
        int i=n/9;
        int j=n%9;
        int x = (i/3)*3+(j/3);
        if(board[i][j]=='.')
        {
            for(int num=0; num<9; num++)
            {
                if(rows[i][num]!=true && cols[num][j]!=true && box[x][num]!=true)
                {
                    board[i][j]=(char)('1'+num);
                    rows[i][num]=cols[num][j]=box[x][num]=true;
                    solveSudoku(board,n+1);
                    if(solved)
                        return;
                    board[i][j]='.';
                    rows[i][num]=cols[num][j]=box[x][num]=false;
                }
            }
        }
        else
        {
            solveSudoku(board,n+1);
        }
    }
}
