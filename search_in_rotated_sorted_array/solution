class Solution {
    public int search(int[] nums, int target) {
        if(nums.length==0)
            return -1;
        if(nums.length==1)
        {
            if(nums[0]==target)
                return 0;
            else
                return -1;
        }
        int pivot = findPivot(nums,0,nums.length-1);
        if(pivot==-1)
        {
            return binSearch(nums,0,nums.length-1,target);
        }
        else
        {
            if(nums[0]<=target && target<=nums[pivot])
                return binSearch(nums,0,pivot,target);
            return binSearch(nums,pivot+1,nums.length-1,target);
        }
    }
    
    public int findPivot(int[] nums, int beg, int last)
    {
        int mid = (beg+last)/2;
        if(last==beg+1)
            return mid;
        else if(nums[beg]>=nums[mid])
            return findPivot(nums,beg,mid);
        else if(nums[mid]>=nums[last])
            return findPivot(nums,mid,last);
        return -1;
    }
    
    public int binSearch(int[] nums, int beg, int last, int target)
    {
        int mid = (beg+last)/2;
        if(last<beg)
            return -1;
        else if(nums[mid]==target)
            return mid;
        else if(target<nums[mid])
            return binSearch(nums,beg,mid-1,target);
        else
            return binSearch(nums,mid+1,last,target);
    }
}
