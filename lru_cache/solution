class LRUCache {
    class Node{
        int key;
        int value;
        Node next;
        Node prev;
        
        Node(int key, int val)
        {
            this.key = key;
            this.value = val;
        }
    }
    
    private int capacity;
    private HashMap<Integer,Node> map;
    private Node head;
    private Node tail;
    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        head=null;
        tail=null;
    }
    
    public int get(int key) {
        Node node = map.get(key);
        if(node==null)
            return -1;
        if(node!=tail)
        {
            if(node == head)
            {
                head=head.next;
            }
            else
            {
                node.prev.next=node.next;
                node.next.prev=node.prev;
            }
            tail.next=node;
            node.prev=tail;
            node.next=null;
            tail=node;
        }
        return node.value;
    }
    
    public void put(int key, int value) {
        Node node = map.get(key);
        if(node!=null)
        {
            node.value = value;
            if(node!=tail)
            {
                if(node==head)
                {
                    head=head.next;
                }
                else
                {
                    node.prev.next=node.next;
                    node.next.prev=node.prev;
                }
                tail.next=node;
                node.prev=tail;
                node.next=null;
                tail=node;
            }
        }
        else
        {
            Node newNode = new Node(key,value);
            if(capacity==0)
            {
                Node temp = head;
                head=head.next;
                map.remove(temp.key);
                capacity++;
            }
            if(head==null && tail==null)
            {
                head = newNode;
            }
            else
            {
                tail.next=newNode;
                newNode.prev=tail;
                newNode.next=null;
            }
            tail=newNode;
            map.put(key,newNode);
            capacity--;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
